Antes de hacer un commit debo especificar quien soy por 1ra vez. Para esto uso:
git config --global user.name "nombre de la persona"
git config --global user.email "un correo"
//--------------------------------------------------------

ls te indica un listado de los archivos de en donde estas en ese momento
GIT entiende mejor el texto plano que los archivos binarios como word y eso
cd ruta_que_quieres_ir es para cambiar el directorio e ir doned quieres ir cd / es el home
ls -a es que muestre los archivos pero no en lista
ls -al es que muestre todos los archivos incluso los ocultos y me los ponga en una lista
clear limpia la consola
cd .. te saca de la carpeta en la que te encuentras, un paso atras
mkdir nombre_carpeta es para crear carpetas. Debes fijarte donde estas parado para saber donde se va a crear
touch nombre_archivo.extension crea archivos vacios
. es la carpeta actual
.. es la carpeta anterior
cat nombre_archivo.extension muestra el contenido de un archivo
history muestra todos los comandos escritos
!numero_de_comando y te repite el comando que esta en esa linea que ha sido visto con el comando history
rm nombre_archivo.extension borra ese archivo(Cuidado con este, por que puede borrar el disco duro)
-Para crear un repo dbes decir donde esta la carpeta central de tus archivos y escribir git init. Es como decir donde esta el index.html de una app

-Cuando hago un git add lo guarda en memoria y para guardarlo de verdad uso git commit. EN caso de que le di git add a un archivo que no era, le puedo dar 
git rm cached nombre_archivo.extension y lo quita de memoria

-Un solo guion(-) indica que pasare una letra como argumento
-2 guiones (--) indica que pasare una palabra como argumento


//------------------------------------------------------------------------
-git init: empieza un repositorio en tu carpeta y es donde se van a guardar los cambios de tus archivos

-Pero tu carpeta debe saber que ese archivo existe entonces se utiliza:
git add nombre_de_archivo.extension

-Debes decirle que los cambios hechos en tus archivos estan listos. Entonces debes decir para que se guarden los ultimos cambios hechos, se utiliza:
git commit 

-Pero si quieres dejarle un mensaje para saber que cambiaste desde afuera puedes hacer:
git commit -m "Mensaje"

-Lo que hace es agregar todos los archivos que hayas cambiado en la carpeta donde estas
git add . 

-Despues de haber hecho git add . solo debes hacer otro commit para asegurar esos cambios

-Para saber el status de tu repositorio, puedes usar, con esto puedes saber si hay algun cambio que no hayas anadido y eso:
git status 

-Te va a mostrar todos los cambios historicos hechos, incluyendo las lineas de texto cambiadas y todo:
git show

-Para saber la historia entera de un archivo:
git log nombre_de_archivo.extension

-Te permite enviar hacia otro repositorio remoto, lo que estas haciendo:
git push 

-Para traer el archivo de otro repositorio:
git pull

//------------------------------------------------------------------------
//Historia hecha en el 1er curso

$ history
    1  ls
    2  cd
    3  pwd
    4  pwd
    5  git -version
    6  git version
    7  cd /c
    8  ls
    9  cd  users
   10  cd ..
   11  pwd
   12  cd Curso_Git
   13  cd
   14  ls
   15  ls -al
   16  cd Desktop
   17  cd Cursos
   18  cd Curso_Git
   19  git init
   20  code
   21  gi status
   22  git status
   23  git add historia.txt
   24  git status
   25  git commit -m "Este es el 1er commit de este archivo"
   26  git config
   27  git config --list
   28  git config --list --show -origin
   29  git config --global user.name "Luis Canot"
   30  git config --global user.email "luisr.sosa26@gmail.com"
   31  git commit -m "Este es el 1er commit de este archivo"
   32  code
   33  cat historia.txt
   34  code
   35  git status
   36  git commit -m "Cambios al archivo de historia para reflejar los cambios hechos"
   37  git add .
   38  git commit -m "Cambios al archivo de historia para reflejar los cambios hechos"
   39  history
   40  git log historia.txt
   41  history
